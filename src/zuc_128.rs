const S0: [u8; 256] = [
	0x3e,0x72,0x5b,0x47,0xca,0xe0,0x00,0x33,0x04,0xd1,0x54,0x98,0x09,0xb9,0x6d,0xcb,
	0x7b,0x1b,0xf9,0x32,0xaf,0x9d,0x6a,0xa5,0xb8,0x2d,0xfc,0x1d,0x08,0x53,0x03,0x90,
	0x4d,0x4e,0x84,0x99,0xe4,0xce,0xd9,0x91,0xdd,0xb6,0x85,0x48,0x8b,0x29,0x6e,0xac,
	0xcd,0xc1,0xf8,0x1e,0x73,0x43,0x69,0xc6,0xb5,0xbd,0xfd,0x39,0x63,0x20,0xd4,0x38,
	0x76,0x7d,0xb2,0xa7,0xcf,0xed,0x57,0xc5,0xf3,0x2c,0xbb,0x14,0x21,0x06,0x55,0x9b,
	0xe3,0xef,0x5e,0x31,0x4f,0x7f,0x5a,0xa4,0x0d,0x82,0x51,0x49,0x5f,0xba,0x58,0x1c,
	0x4a,0x16,0xd5,0x17,0xa8,0x92,0x24,0x1f,0x8c,0xff,0xd8,0xae,0x2e,0x01,0xd3,0xad,
	0x3b,0x4b,0xda,0x46,0xeb,0xc9,0xde,0x9a,0x8f,0x87,0xd7,0x3a,0x80,0x6f,0x2f,0xc8,
	0xb1,0xb4,0x37,0xf7,0x0a,0x22,0x13,0x28,0x7c,0xcc,0x3c,0x89,0xc7,0xc3,0x96,0x56,
	0x07,0xbf,0x7e,0xf0,0x0b,0x2b,0x97,0x52,0x35,0x41,0x79,0x61,0xa6,0x4c,0x10,0xfe,
	0xbc,0x26,0x95,0x88,0x8a,0xb0,0xa3,0xfb,0xc0,0x18,0x94,0xf2,0xe1,0xe5,0xe9,0x5d,
	0xd0,0xdc,0x11,0x66,0x64,0x5c,0xec,0x59,0x42,0x75,0x12,0xf5,0x74,0x9c,0xaa,0x23,
	0x0e,0x86,0xab,0xbe,0x2a,0x02,0xe7,0x67,0xe6,0x44,0xa2,0x6c,0xc2,0x93,0x9f,0xf1,
	0xf6,0xfa,0x36,0xd2,0x50,0x68,0x9e,0x62,0x71,0x15,0x3d,0xd6,0x40,0xc4,0xe2,0x0f,
	0x8e,0x83,0x77,0x6b,0x25,0x05,0x3f,0x0c,0x30,0xea,0x70,0xb7,0xa1,0xe8,0xa9,0x65,
	0x8d,0x27,0x1a,0xdb,0x81,0xb3,0xa0,0xf4,0x45,0x7a,0x19,0xdf,0xee,0x78,0x34,0x60
];

const S1: [u8; 256] = [
	0x55,0xc2,0x63,0x71,0x3b,0xc8,0x47,0x86,0x9f,0x3c,0xda,0x5b,0x29,0xaa,0xfd,0x77,
	0x8c,0xc5,0x94,0x0c,0xa6,0x1a,0x13,0x00,0xe3,0xa8,0x16,0x72,0x40,0xf9,0xf8,0x42,
	0x44,0x26,0x68,0x96,0x81,0xd9,0x45,0x3e,0x10,0x76,0xc6,0xa7,0x8b,0x39,0x43,0xe1,
	0x3a,0xb5,0x56,0x2a,0xc0,0x6d,0xb3,0x05,0x22,0x66,0xbf,0xdc,0x0b,0xfa,0x62,0x48,
	0xdd,0x20,0x11,0x06,0x36,0xc9,0xc1,0xcf,0xf6,0x27,0x52,0xbb,0x69,0xf5,0xd4,0x87,
	0x7f,0x84,0x4c,0xd2,0x9c,0x57,0xa4,0xbc,0x4f,0x9a,0xdf,0xfe,0xd6,0x8d,0x7a,0xeb,
	0x2b,0x53,0xd8,0x5c,0xa1,0x14,0x17,0xfb,0x23,0xd5,0x7d,0x30,0x67,0x73,0x08,0x09,
	0xee,0xb7,0x70,0x3f,0x61,0xb2,0x19,0x8e,0x4e,0xe5,0x4b,0x93,0x8f,0x5d,0xdb,0xa9,
	0xad,0xf1,0xae,0x2e,0xcb,0x0d,0xfc,0xf4,0x2d,0x46,0x6e,0x1d,0x97,0xe8,0xd1,0xe9,
	0x4d,0x37,0xa5,0x75,0x5e,0x83,0x9e,0xab,0x82,0x9d,0xb9,0x1c,0xe0,0xcd,0x49,0x89,
	0x01,0xb6,0xbd,0x58,0x24,0xa2,0x5f,0x38,0x78,0x99,0x15,0x90,0x50,0xb8,0x95,0xe4,
	0xd0,0x91,0xc7,0xce,0xed,0x0f,0xb4,0x6f,0xa0,0xcc,0xf0,0x02,0x4a,0x79,0xc3,0xde,
	0xa3,0xef,0xea,0x51,0xe6,0x6b,0x18,0xec,0x1b,0x2c,0x80,0xf7,0x74,0xe7,0xff,0x21,
	0x5a,0x6a,0x54,0x1e,0x41,0x31,0x92,0x35,0xc4,0x33,0x07,0x0a,0xba,0x7e,0x0e,0x34,
	0x88,0xb1,0x98,0x7c,0xf3,0x3d,0x60,0x6c,0x7b,0xca,0xd3,0x1f,0x32,0x65,0x04,0x28,
	0x64,0xbe,0x85,0x9b,0x2f,0x59,0x8a,0xd7,0xb0,0x25,0xac,0xaf,0x12,0x03,0xe2,0xf2
];

// The constant D.
const D: [u16; 16] = [
    0x44D7, 0x26BC, 0x626B, 0x135E, 0x5789, 0x35E2, 0x7135, 0x09AF,
    0x4D78, 0x2F13, 0x6BC4, 0x1AF1, 0x5E26, 0x3C4D, 0x789A, 0x47AC
];

const BUFF_LEN: usize = 16;	// move inside struct?
struct LfsrBuffer {
	lfsr_buff: [u32; BUFF_LEN],
	start: usize,
}

impl LfsrBuffer {
	pub fn new(buffer: [u32; BUFF_LEN]) -> LfsrBuffer {
		LfsrBuffer{lfsr_buff: buffer, start: 0}
	}

	pub fn push(&mut self, value: u32) {
		self.lfsr_buff[self.start] = value;
		self.start = (self.start + 1) % BUFF_LEN;
	}

	pub fn get(&self, index: usize) -> u32 {
		self.lfsr_buff[(index + self.start) % BUFF_LEN]
	}
}

#[allow(non_camel_case_types)]
pub struct Zuc_128 {
	lfsr: LfsrBuffer,
	brc_x: [u32; 4],
	f_r1: u32,
	f_r2: u32,
}

impl Zuc_128 {
	pub fn new(k: &[u8; 16], iv: &[u8; 16]) -> Zuc_128 {
		let mut lfsr_arr: [u32; 16] = [0u32; 16];	// No need to init here, but compiler is grumbling
		for i in 0..16 {
			lfsr_arr[i] = make_u31(k[i], D[i], iv[i]);
		}

		let lfsr_buffer: LfsrBuffer = LfsrBuffer::new(lfsr_arr);
		let mut result: Zuc_128 = Zuc_128 {lfsr: lfsr_buffer, brc_x: [0u32; 4], f_r1: 0, f_r2: 0};

		for _i in 0..32 {
			result.bit_reorganization();
			//println!("brc_x{} {:x}\t{:x}\t{:x}\t{:x}", _i,
			//	result.brc_x[0], result.brc_x[1], result.brc_x[2], result.brc_x[3]);
			let w: u32 = result.f();
			//println!("f_r{}   {:x}\t{:x}", _i, result.f_r1, result.f_r2);
			result.lfsr_with_init_mode(w >> 1);
			//println!("lfsr{}  {:x}\t{:x}", _i, result.lfsr.get(0), result.lfsr.get(1));
		}

		result
	}

	#[inline]
	fn lsfr_common_part(&self) -> u32 {
		let mut f: u32;
		let mut v: u32;

		f = self.lfsr.get(0);
		v = mul_by_pow_2(self.lfsr.get(0), 8);
		f = add_mod(f, v);
		v = mul_by_pow_2(self.lfsr.get(4), 20);
		f = add_mod(f, v);
		v = mul_by_pow_2(self.lfsr.get(10), 21);
		f = add_mod(f, v);
		v = mul_by_pow_2(self.lfsr.get(13), 17);
		f = add_mod(f, v);
		v = mul_by_pow_2(self.lfsr.get(15), 15);
		f = add_mod(f, v);

		f
	}

	fn lfsr_with_init_mode(&mut self, u: u32) {
		let f1: u32 = self.lsfr_common_part();
		let f2: u32 = add_mod(f1, u);

		/* update the state */
		self.lfsr.push(f2);
	}

	fn lfsr_with_work_mode(&mut self) {
		let f: u32 = self.lsfr_common_part();
		self.lfsr.push(f);
	}

	fn bit_reorganization(&mut self) {
		self.brc_x[0] = ((self.lfsr.get(15) & 0x7FFF8000) << 1) | (self.lfsr.get(14) & 0xFFFF);
		self.brc_x[1] = ((self.lfsr.get(11) & 0xFFFF) << 16) | (self.lfsr.get(9) >> 15);
		self.brc_x[2] = ((self.lfsr.get(7) & 0xFFFF) << 16) | (self.lfsr.get(5) >> 15);
		self.brc_x[3] = ((self.lfsr.get(2) & 0xFFFF) << 16) | (self.lfsr.get(0) >> 15);
	}

	fn f(&mut self) -> u32 {
		let w: u32 = (self.brc_x[0] ^ self.f_r1).wrapping_add(self.f_r2);
		let w1: u32 = self.f_r1.wrapping_add(self.brc_x[1]);
		let w2: u32 = self.f_r2 ^ self.brc_x[2];
		let u: u32 = l1((w1 << 16) | (w2 >> 16));
		let v: u32 = l2((w2 << 16) | (w1 >> 16));
		self.f_r1 = make_u32(S0[(u >> 24) as usize],
		                     S1[((u >> 16) & 0xFF) as usize],
		                     S0[((u >> 8) & 0xFF) as usize],
		                     S1[(u & 0xFF) as usize]);
		self.f_r2 = make_u32(S0[(v >> 24) as usize],
		                     S1[((v >> 16) & 0xFF) as usize],
		                     S0[((v >> 8) & 0xFF) as usize],
		                     S1[(v & 0xFF) as usize]);
		return w;
	}

	pub fn generate_keystream(&mut self, buffer: &mut[u32], length: usize) {
		{
			self.bit_reorganization();
			let _unused = self.f();
			self.lfsr_with_work_mode();
		}
		for i in 0..length {
			self.bit_reorganization();
			buffer[i] = self.f() ^ self.brc_x[3];
			self.lfsr_with_work_mode();
		}
	}
}

// c = (a + b) mod (2^31 – 1)
#[inline]
fn add_mod(a: u32, b: u32) -> u32 {
	let c: u32 = a.wrapping_add(b);
	(c & 0x7FFFFFFF) + (c >> 31)
}

#[inline]
fn mul_by_pow_2 (x: u32, k: usize) -> u32 {
	((((x) << k) | ((x) >> (31 - k))) & 0x7FFFFFFF)
}

#[inline]
fn l1(x: u32) -> u32 {
	let x2  = x.rotate_left(2);
	let x10 = x.rotate_left(10);
	let x18 = x.rotate_left(18);
	let x24 = x.rotate_left(24);
	(x ^ x2 ^ x10 ^ x18 ^ x24)
}

#[inline]
fn l2(x: u32) -> u32 {
	let x8  = x.rotate_left(8);
	let x14 = x.rotate_left(14);
	let x22 = x.rotate_left(22);
	let x30 = x.rotate_left(30);
	(x ^ x8 ^ x14 ^ x22 ^ x30)
}

#[inline]
fn make_u32(a: u8, b: u8, c: u8, d: u8) -> u32 {
	(((a as u32) << 24) | ((b as u32) << 16) | ((c as u32) << 8) | ((d as u32)))
}

#[inline]
fn make_u31(a: u8, b: u16, c: u8) -> u32 {
	(((a as u32) << 23) | ((b as u32) << 8) | ((c as u32)))
}

// Specification of the 3GPP Confidentiality and Integrity
// Algorithms 128-EEA3 & 128-EIA3
// Document 3: Implementor’s Test Data
#[test]
fn zuc_128_test_set_3_1() {
	let key: [u8; 16] = [0u8; 16];
	let iv: [u8; 16]  = [0u8; 16];
	let expected: [u32; 2]  = [0x27bede74, 0x018082da];

	let mut keystream: [u32; 2] = [0u32; 2];

	let mut zuc: Zuc_128 = Zuc_128::new(&key, &iv);
	zuc.generate_keystream(&mut keystream, 2);

	assert_eq!(keystream[0], expected[0]);
	assert_eq!(keystream[1], expected[1]);
}

#[test]
fn zuc_128_test_set_3_2() {
	let key: [u8; 16] = [0xFFu8; 16];
	let iv: [u8; 16]  = [0xFFu8; 16];
	let expected: [u32; 2]  = [0x0657cfa0, 0x7096398b];

	let mut keystream: [u32; 2] = [0u32; 2];

	let mut zuc: Zuc_128 = Zuc_128::new(&key, &iv);
	zuc.generate_keystream(&mut keystream, 2);

	assert_eq!(keystream[0], expected[0]);
	assert_eq!(keystream[1], expected[1]);
}

#[test]
fn zuc_128_test_set_3_3() {
	let key: [u8; 16] = [0x3d, 0x4c, 0x4b, 0xe9, 0x6a, 0x82, 0xfd, 0xae,
	                     0xb5, 0x8f, 0x64, 0x1d, 0xb1, 0x7b, 0x45, 0x5b];
	let iv: [u8; 16]  = [0x84, 0x31, 0x9a, 0xa8, 0xde, 0x69, 0x15, 0xca,
	                     0x1f, 0x6b, 0xda, 0x6b, 0xfb, 0xd8, 0xc7, 0x66];
	let expected: [u32; 2]  = [0x14f1c272, 0x3279c419];

	let mut keystream: [u32; 2] = [0u32; 2];

	let mut zuc: Zuc_128 = Zuc_128::new(&key, &iv);
	zuc.generate_keystream(&mut keystream, 2);

	assert_eq!(keystream[0], expected[0]);
	assert_eq!(keystream[1], expected[1]);
}

#[test]
fn zuc_128_test_set_3_4() {
	let key: [u8; 16] = [0x4d, 0x32, 0x0b, 0xfa, 0xd4, 0xc2, 0x85, 0xbf,
	                     0xd6, 0xb8, 0xbd, 0x00, 0xf3, 0x9d, 0x8b, 0x41];
	let iv: [u8; 16]  = [0x52, 0x95, 0x9d, 0xab, 0xa0, 0xbf, 0x17, 0x6e,
                         0xce, 0x2d, 0xc3, 0x15, 0x04, 0x9e, 0xb5, 0x74];
	let expected: [u32; 3]  = [0xed4400e7, 0x0633e5c5, 0x7a574cdb];

	let mut keystream: [u32; 2000] = [0u32; 2000];

	let mut zuc: Zuc_128 = Zuc_128::new(&key, &iv);
	zuc.generate_keystream(&mut keystream, 2000);

	assert_eq!(keystream[0], expected[0]);
	assert_eq!(keystream[1], expected[1]);
	assert_eq!(keystream[1999], expected[2]);
}

#[test]
fn zuc_128_test_set_4_1() {
	let key: [u8; 16] = [0x17, 0x3d, 0x14, 0xba, 0x50, 0x03, 0x73, 0x1d,
	                     0x7a, 0x60, 0x04, 0x94, 0x70, 0xf0, 0x0a, 0x29];
	let iv: [u8; 16]  = [0x66, 0x03, 0x54, 0x92, 0x78, 0x00, 0x00, 0x00,
	                     0x66, 0x03, 0x54, 0x92, 0x78, 0x00, 0x00, 0x00];
	let plaintext:  [u32; 6] = [0x6cf65340, 0x735552ab, 0x0c9752fa,
	                            0x6f9025fe, 0x0bd675d9, 0x005875b2];
	let exp_keystr: [u32; 6] = [0xca3e0c86, 0x19aed798, 0xa66b77e2,
	                            0xb077a16a, 0x05379169, 0x307bf97a];
	let ciphertext: [u32; 6] = [0xa6c85fc6, 0x6afb8533, 0xaafc2518,
	                            0xdfe78494, 0x0ee1e4b0, 0x30238cc8];

	let mut zuc: Zuc_128 = Zuc_128::new(&key, &iv);
	let mut keystream: [u32; 6] = [0u32; 6];

	zuc.generate_keystream(&mut keystream, 6);

	for i in 0..6 {
		assert_eq!(keystream[i], exp_keystr[i]);
		assert_eq!(plaintext[i] ^ keystream[i], ciphertext[i]);
	}
}

#[test]
fn zuc_128_test_set_4_2() {
	let key: [u8; 16] = [0xe5, 0xbd, 0x3e, 0xa0, 0xeb, 0x55, 0xad, 0xe8,
	                     0x66, 0xc6, 0xac, 0x58, 0xbd, 0x54, 0x30, 0x2a];
	let iv: [u8; 16]  = [0x00, 0x05, 0x68, 0x23, 0xc4, 0x00, 0x00, 0x00,
	                     0x00, 0x05, 0x68, 0x23, 0xc4, 0x00, 0x00, 0x00,];
	let plaintext:  [u32; 25] = [0x14a8ef69, 0x3d678507, 0xbbe7270a, 0x7f67ff50, 0x06c3525b,
	                             0x9807e467, 0xc4e56000, 0xba338f5d, 0x42955903, 0x67518222,
	                             0x46c80d3b, 0x38f07f4b, 0xe2d8ff58, 0x05f51322, 0x29bde93b,
	                             0xbbdcaf38, 0x2bf1ee97, 0x2fbf9977, 0xbada8945, 0x847a2a6c,
	                             0x9ad34a66, 0x7554e04d, 0x1f7fa2c3, 0x3241bd8f, 0x01ba220d];
	let ciphertext: [u32; 25] = [0x131d43e0, 0xdea1be5c, 0x5a1bfd97, 0x1d852cbf, 0x712d7b4f,
	                             0x57961fea, 0x3208afa8, 0xbca433f4, 0x56ad09c7, 0x417e58bc,
	                             0x69cf8866, 0xd1353f74, 0x865e8078, 0x1d202dfb, 0x3ecff7fc,
	                             0xbc3b190f, 0xe82a204e, 0xd0e350fc, 0x0f6f2613, 0xb2f2bca6,
	                             0xdf5a473a, 0x57a4a00d, 0x985ebad8, 0x80d6f238, 0x64a07b01];

	let mut zuc: Zuc_128 = Zuc_128::new(&key, &iv);
	let mut keystream: [u32; 25] = [0u32; 25];

	zuc.generate_keystream(&mut keystream, 25);

	for i in 0..25 {
		assert_eq!(plaintext[i] ^ keystream[i], ciphertext[i]);
	}
}